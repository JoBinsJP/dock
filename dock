#!/usr/bin/env bash

LARAVEL_SERVICE=laravel
LARAVEL_USER=laravel
DATABASE_SERVICE=postgres12

# Source the ".env" file so Laravel's environment variables are available...
if [ -f ./.env ]; then
    source ./.env
fi

if [ $# -eq 0 ]; then
    ${DOCKER_COMPOSE} ps

    exit 0
fi

# docker compose up
if [ "$1" == "up" ]; then
    shift 1

    if [ $# -eq 0 ]
      then
        read -p "Do you really want to start all services? [y/n] " -n 1 -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            ${DOCKER_COMPOSE} -f docker-compose.yml up -d --remove-orphans --build
        fi
    else
        ${DOCKER_COMPOSE} -f docker-compose.yml up -d --remove-orphans --build "$@"
    fi

    exit 0
fi

# docker compose down
if [ "$1" == "down" ]; then
    ${DOCKER_COMPOSE} -f docker-compose.yml down

    exit 0
fi

# enter into the docker container
if [ "$1" == "ssh" ]; then
    shift 1

    if [ ! -z $1 ]; then
        arrIN=(${1//@/ })
        sshUser=${arrIN[0]}
        sshServer=${arrIN[1]}

        sshService=$sshUser
        if [ ! -z $sshServer ]; then
            sshUserOption="-u $sshUser"
            sshService=$sshServer
        fi

        ${DOCKER_COMPOSE} exec $sshUserOption $sshService sh

        exit 0
    fi

    ${DOCKER_COMPOSE} exec -u "$LARAVEL_USER" "$LARAVEL_SERVICE" sh -l

    exit 0
fi

# To execute/run any command inside laravel docker container in formatted way
if [ "$1" == "run" ]; then
    shift 1

    ${DOCKER_COMPOSE} exec -u "$LARAVEL_USER" "$LARAVEL_SERVICE" "$@"

    exit 0
fi

# To restores db dump
if [ "$1" == "db:restore" ]; then
    shift 1

    ${DOCKER_COMPOSE} exec -T "$DATABASE_SERVICE" psql -U "$POSTGRES_ROOT_USER" -d "$DUMP_RESTORE_DB_NAME" -w <"$@"

    exit 0
fi

# Composer command inside laravel docker container
if [ "$1" == "composer" ]; then
    shift 1

    ${DOCKER_COMPOSE} exec -u "$LARAVEL_USER" "$LARAVEL_SERVICE" composer "$@"

    exit 0
fi

# PHP artisan command to run inside laravel docker container
if [ "$1" == "par" ]; then
    shift 1

    ${DOCKER_COMPOSE} exec -u "$LARAVEL_USER" "$LARAVEL_SERVICE" php artisan "$@"

    exit 0
fi

# PHP artisan command to run inside laravel docker container
if [ "$1" == "yarn" ]; then
    shift 1

    ${DOCKER_COMPOSE} exec -u "$LARAVEL_USER" "$LARAVEL_SERVICE" yarn "$@"

    exit 0
fi

# PHP artisan command to generate ziggy routes
if [ "$1" == "generate-routes" ]; then
    shift 1

    ${DOCKER_COMPOSE} exec -u "$LARAVEL_USER" "$LARAVEL_SERVICE" \
        php artisan ziggy:generate resources/assets/js/routes.generated.js

    exit 0
fi

# PHP Lint
if [ "$1" == "lint-php" ]; then
    shift 1

    ${DOCKER_COMPOSE} exec -u "$LARAVEL_USER" "$LARAVEL_SERVICE" \
        ./vendor/bin/phpcs --standard=./.devops/conf/.php-cs-rules.xml ./app/

    ${DOCKER_COMPOSE} exec -u "$LARAVEL_USER" "$LARAVEL_SERVICE" \
        ./vendor/bin/phpmd ./app/ ansi ./.devops/conf/.php-md-rules.xml

    ${DOCKER_COMPOSE} exec -u "$LARAVEL_USER" "$LARAVEL_SERVICE" \
        ./vendor/bin/phpstan analyse -c ./.devops/conf/.phpstan.neon --memory-limit=2G

    exit 0
fi

# JS Lint
if [ "$1" == "lint-js" ]; then
    shift 1

    ${DOCKER_COMPOSE} exec -u "$LARAVEL_USER" "$LARAVEL_SERVICE" \
        ./node_modules/.bin/eslint -c ./.eslintrc ./resources

    exit 0
fi

# Pass unknown commands to the "docker-compose" binary...
${DOCKER_COMPOSE} "$@"

exit 0
